'use strict';

import { IAgent } from '../IAgent';
import { IInstrumentationEvent } from '../tracing/IInstrumentationEvent';
import { DateTimeValue } from '../configuration/DateTimeValue';
import { createHttpClientError, IErrorReportingService } from '@glimpse/glimpse-node-common';
import { default as tracing, IEventCallback } from '../tracing/Tracing';
import { HttpHelper } from '../util/HttpHelper';
import {
    EVENT_HTTP_CLIENT_REQUEST_CREATED, IClientRequestCreatedEvent,
    EVENT_HTTP_CLIENT_REQUEST_DATA_SENT, IClientRequestDataSentEvent,
    EVENT_HTTP_CLIENT_REQUEST_END, IClientRequestEndEvent,
    EVENT_HTTP_CLIENT_REQUEST_ERROR, IClientRequestErrorEvent,
    EVENT_HTTP_CLIENT_RESPONSE_RECEIVED, IClientResponseReceivedEvent,
    EVENT_HTTP_CLIENT_RESPONSE_DATA_RECEIVED, IClientResponseDataReceivedEvent,
    EVENT_HTTP_CLIENT_RESPONSE_END, IClientResponseEndEvent,
    EVENT_HTTP_CLIENT_RESPONSE_ERROR, IClientResponseErrorEvent
} from '../tracing/module_instrumentors/HttpEvents';
import { ClientRequest, IncomingMessage } from 'http';

import url = require('url');
import * as _ from 'lodash';

interface IRequestData {
    startTime: number[];
    startTimeStamp: string;
    endTimeStamp: string;
    duration: number;
    //tslint:disable-next-line:no-any
    options;
    request: ClientRequest;
    response: IncomingMessage;
    requestBodyChunks: Array<Buffer | string>;
    requestBodyLength: number;
    responseBodyChunks: Array<Buffer | string>;
    responseBodyLength: number;
    requestStartTimeStamp: string;
    responseStartTimeStamp: string;
    correlationId: string;
}

export class ClientRequestInspector {
    private agent: IAgent;
    private requests: { [ requestId: string ]: IRequestData } = {};
    private listeners: { [ eventName: string ]: IEventCallback } = {};
    private errorReportingService: IErrorReportingService;

    private normalizeOptions(options, req) {
        // Normalize to a copy of the original options
        if (typeof options === 'string') {
            options = url.parse(options);
        }
        options = _.assign({}, options);

        // Oddly, url.format ignores path and only uses pathname and search,
        // so create them from the path, if path was specified
        if (options.path) {
            const parsedQuery = url.parse(options.path);
            options.pathname = parsedQuery.pathname;
            options.search = parsedQuery.search;
        }

        // Simiarly, url.format ignores hostname and path if host is specified,
        // even if host doesn't have the port, but http.request does not work
        // this way. It will use the port if one is not specified in host,
        // effectively treating host as hostname, but will use the port specified
        // in host if it exists. Fun times.
        if (options.host && options.port) {
            // Force a protocol so it will parse the host as the host, not path.
            // It is discarded and not used, so it doesn't matter if it doesn't match
            const parsedHost = url.parse(`http://${options.host}`);
            if (!parsedHost.port && options.port) {
                options.hostname = options.host;
                delete options.host;
            }
        }

        // Mix in default values used by http.request and others
        options.protocol = options.protocol || req.agent.protocol;
        options.hostname = options.hostname || 'localhost';

        return options;
    }

    public numOutstandingRequests() {
        return Object.keys(this.requests).length;
    }

    public before(masterData: IRequestData): void {

        // TODO: https://github.com/Glimpse/Glimpse.Node/issues/307
        // Add support for base64 encoding non-text content by setting the encoding here
        const encoding = 'utf8';
        for (let i = 0; i < masterData.requestBodyChunks.length; i++) {
            if (Buffer.isBuffer(masterData.requestBodyChunks[i])) {
                masterData.requestBodyChunks[i] = masterData.requestBodyChunks[i].toString();
            }
        }

        const payload = {
            protocol: {
                identifier: masterData.options.protocol.replace(':', '').toLowerCase(),
                // This value is hard coded in Node: https://github.com/nodejs/node/blob/d0582ef9e19e8ed941b0a585c935ad11919080ee/lib/_http_client.js#L114
                version: '1.1'
            },
            url: url.format(masterData.options),
            // The method property isn't documented in the typings definition, for some reason
            //tslint:disable-next-line:no-any
            method: (<any>masterData.request).method,
            startTime: masterData.startTimeStamp,
            // Note: this uses a private field on the request object. Sadly, there isn't another way to get these currently.
            //tslint:disable-next-line:no-any
            headers: (<any>masterData.request)._headers,
            isAjax: false,
            clientIp: '127.0.0.1', // TODO: Is this field relevant, since it's the IP of this system? We can get the list of interfaces from os.networkInterfaces()
            body: {
                size: masterData.requestBodyLength,
                encoding,
                content: masterData.requestBodyChunks.join(''),
                isTruncated: masterData.requestBodyLength > HttpHelper.getMaxBodySize(this.agent.providers.configSettings)
            },
            timing: {
                requestStart: masterData.requestStartTimeStamp
            },
            source: 'Server',
            correlationId: masterData.correlationId
        };

        this.agent.broker.createAndSendMessage(payload, ['data-http-request'], undefined, HttpHelper.getContext(masterData.request));
    }

    public after(masterData: IRequestData): void {

        // TODO: https://github.com/Glimpse/Glimpse.Node/issues/307
        // Add support for base64 encoding non-text content by setting the encoding here
        const encoding = 'utf8';
        for (let i = 0; i < masterData.responseBodyChunks.length; i++) {
            if (Buffer.isBuffer(masterData.responseBodyChunks[i])) {
                masterData.responseBodyChunks[i] = masterData.responseBodyChunks[i].toString();
            }
        }

        const payload = {
            // res.url doesn't seem to be populated in practice
            url: masterData.response.url || url.format(masterData.options),
            headers: masterData.response.headers,
            statusCode: masterData.response.statusCode,
            endTime: masterData.endTimeStamp,
            duration: masterData.duration,
            body: {
                size: masterData.responseBodyLength,
                encoding,
                content: masterData.responseBodyChunks.join(''),
                isTruncated: masterData.responseBodyLength > HttpHelper.getMaxBodySize(this.agent.providers.configSettings)
            },
            timing: {
                requestStart: masterData.requestStartTimeStamp,
                responseStart: masterData.responseStartTimeStamp,
                responseEnd: this.getCurrentTimeStamp()
            },
            source: 'Server',
            correlationId: masterData.correlationId
        };

        this.agent.broker.createAndSendMessage(payload, ['data-http-response'], undefined, HttpHelper.getContext(masterData.response));
    }

    public init(agent: IAgent, errorReportingService: IErrorReportingService) {
        this.agent = agent;
        this.errorReportingService = errorReportingService;
        this.listeners = {
            [EVENT_HTTP_CLIENT_REQUEST_CREATED]: (event) => this.onRequestCreated(event),
            [EVENT_HTTP_CLIENT_REQUEST_DATA_SENT]: (event) => this.onRequestDataSent(event),
            [EVENT_HTTP_CLIENT_REQUEST_END]: (event) => this.onRequestEnd(event),
            [EVENT_HTTP_CLIENT_REQUEST_ERROR]: (event) => this.onRequestError(event),
            [EVENT_HTTP_CLIENT_RESPONSE_RECEIVED]: (event) => this.onResponseReceived(event),
            [EVENT_HTTP_CLIENT_RESPONSE_DATA_RECEIVED]: (event) => this.onResponseDataReceived(event),
            [EVENT_HTTP_CLIENT_RESPONSE_END]: (event) => this.onResponseEnd(event),
            [EVENT_HTTP_CLIENT_RESPONSE_ERROR]: (event) => this.onResponseError(event)
        };
        for (const event in this.listeners) {
            if (!this.listeners.hasOwnProperty(event)) {
                continue;
            }
            tracing.onAlways(event, this.listeners[event]);
        }
    }

    public removeEventListeners() {
        for (const event in this.listeners) {
            if (!this.listeners.hasOwnProperty(event)) {
                continue;
            }
            tracing.removeEventListener(event, this.listeners[event]);
        }
    }

    private getCurrentTimeStamp(): string {
        return DateTimeValue.fromUnixMillisecondTimestamp(Date.now(), process.hrtime()).format();
    }

    private onRequestCreated(event: IInstrumentationEvent): void {
        const eventData: IClientRequestCreatedEvent = event.data;
        this.requests[eventData.id] = {
            startTime: event.time,
            startTimeStamp: DateTimeValue.fromUnixMillisecondTimestamp(event.timestamp, event.time).format(),
            endTimeStamp: '',
            duration: 0,
            options: this.normalizeOptions(eventData.options, eventData.req),
            request: eventData.req,
            response: undefined,
            requestBodyChunks: [],
            requestBodyLength: 0,
            responseBodyChunks: [],
            responseBodyLength: 0,
            requestStartTimeStamp: '',
            responseStartTimeStamp: '',
            correlationId: eventData.id
        };
    }

    private onRequestDataSent(event: IInstrumentationEvent): void {
        const eventData: IClientRequestDataSentEvent = event.data;
        const masterData = this.requests[eventData.id];
        if (!masterData) {
            throw new Error('Internal error: could not find associated master data');
        }
        // Save part or all of the chunk to the set of chunks,
        // truncating if necessary to keep the set under the
        // max body size
        const originalChunkLength = eventData.chunk.length;
        let normalizedChunk = eventData.chunk;
        const maxBodySize = HttpHelper.getMaxBodySize(this.agent.providers.configSettings);
        if (masterData.requestBodyLength < maxBodySize) {
            if (masterData.requestBodyLength + originalChunkLength >= maxBodySize) {
                normalizedChunk = normalizedChunk.slice(0, maxBodySize - masterData.requestBodyLength);
            }
            masterData.requestBodyChunks.push(normalizedChunk);
        }
        masterData.requestBodyLength += originalChunkLength;
    }

    private onRequestEnd(event: IInstrumentationEvent): void {
        const eventData: IClientRequestEndEvent = event.data;
        const masterData = this.requests[eventData.id];
        if (!masterData) {
            throw new Error('Internal error: could not find associated master data');
        }
        masterData.requestStartTimeStamp = this.getCurrentTimeStamp();
        this.before(masterData);
    }

    private onRequestError(event: IInstrumentationEvent): void {
        const eventData: IClientRequestErrorEvent = event.data;
        const masterData = this.requests[eventData.id];
        if (!masterData) {
            throw new Error('Internal error: could not find associated master data');
        }
        delete this.requests[eventData.id];
        this.errorReportingService.reportError(createHttpClientError(eventData.error));
    }

    private onResponseReceived(event: IInstrumentationEvent): void {
        const eventData: IClientResponseReceivedEvent = event.data;
        const masterData = this.requests[eventData.id];
        if (!masterData) {
            throw new Error('Internal error: could not find associated master data');
        }
        masterData.responseStartTimeStamp = this.getCurrentTimeStamp();
    }

    private onResponseDataReceived(event: IInstrumentationEvent): void {
        const eventData: IClientResponseDataReceivedEvent = event.data;
        const masterData = this.requests[eventData.id];
        if (!masterData) {
            throw new Error('Internal error: could not find associated master data');
        }
        // Save part or all of the chunk to the set of chunks,
        // truncating if necessary to keep the set under the
        // max body size
        const originalChunkLength = eventData.chunk.length;
        let normalizedChunk = eventData.chunk;
        const maxBodySize = HttpHelper.getMaxBodySize(this.agent.providers.configSettings);
        if (masterData.responseBodyLength < maxBodySize) {
            if (masterData.responseBodyLength + originalChunkLength >= maxBodySize) {
                normalizedChunk = normalizedChunk.slice(0, maxBodySize - masterData.responseBodyLength);
            }
            masterData.responseBodyChunks.push(normalizedChunk);
        }
        masterData.responseBodyLength += originalChunkLength;
    }

    private onResponseEnd(event: IInstrumentationEvent): void {
        const eventData: IClientResponseEndEvent = event.data;
        const masterData = this.requests[eventData.id];
        if (!masterData) {
            throw new Error('Internal error: could not find associated master data');
        }
        masterData.endTimeStamp = DateTimeValue.fromUnixMillisecondTimestamp(event.timestamp, event.time).format();
        masterData.duration = (event.time[0] * 1e9 + event.time[1] -
            masterData.startTime[0] * 1e9 - masterData.startTime[1]) / 1e6;
        masterData.response = eventData.res;
        this.after(masterData);
        delete this.requests[eventData.id];
    }

    private onResponseError(event: IInstrumentationEvent): void {
        const eventData: IClientResponseErrorEvent = event.data;
        const masterData = this.requests[eventData.id];
        if (!masterData) {
            throw new Error('Internal error: could not find associated master data');
        }
        delete this.requests[eventData.id];
        this.errorReportingService.reportError(createHttpClientError(eventData.error));
    }
}
