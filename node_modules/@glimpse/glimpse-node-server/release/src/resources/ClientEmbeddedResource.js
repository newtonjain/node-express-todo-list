'use strict';
var UriTemplate_1 = require('./UriTemplate');
var path = require('path');
var url = require('url');
var baseUrlProperty = 'baseUrl';
var metadataUriProperty = 'metadataUri';
var experimentalModePropery = 'experimentalMode';
var Resource = (function () {
    function Resource(server) {
        this.name = 'client';
        this.uriTemplate = "?baseUrl=" + Resource.baseUrl + "&hash={hash}{&requestId,follow,metadataUri}";
        this.templateName = 'clientScriptTemplate';
        this.type = 'client';
        this.configSettings = server.providers.configSettings;
    }
    Resource.prototype.invoke = function (req, res, next) {
        if (req.method !== 'GET' && req.method !== 'HEAD') {
            // We ignore non-GET, non-HEAD requests.
            return next();
        }
        var parsedUrl = url.parse(req.originalUrl, /* parseQueryString: */ true);
        var basename = path.basename(parsedUrl.pathname);
        var extension = path.extname(basename);
        // Default to the index page if the request is not for a specific asset type (e.g. a CSS, PNG, etc.)...
        if (!extension) {
            basename = 'index.html';
        }
        // Determine if a redirect is necessary (but only for the index page)...
        if (this.needsExperimentalFlag(basename, parsedUrl) ||
            this.needsPathName(basename, parsedUrl) ||
            this.needsBaseUrl(basename, parsedUrl) ||
            this.needsMetadatUri(basename, parsedUrl)) {
            // Redirect '/glimpse/client' to '/glimpse/client/' to preserve relative paths of served HTML assets...
            if (parsedUrl.pathname === Resource.baseUrl) {
                parsedUrl.pathname = Resource.baseUrlDirectory;
            }
            // Add the baseUrl query parameter if not present...
            if (!parsedUrl.query[baseUrlProperty]) {
                parsedUrl.query[baseUrlProperty] = Resource.baseUrl;
            }
            // Add the metadataUri query parameter if not present...
            if (!parsedUrl.query[metadataUriProperty]) {
                var baseUri = UriTemplate_1.UriTemplate.getBaseUri(this.configSettings, req);
                var metadataUri = baseUri + "/metadata";
                parsedUrl.query[metadataUriProperty] = metadataUri;
            }
            // Add the experimentalMode flag if not present...
            if (!parsedUrl.query[experimentalModePropery]) {
                parsedUrl.query[experimentalModePropery] = this.configSettings.getBoolean('enable.experimental.features', false);
            }
            // NOTE: parse() populates both query and search properties, 
            //       but format() allows only one or the other be set.
            parsedUrl.search = undefined;
            var redirectUrl = url.format(parsedUrl);
            res.redirect(redirectUrl);
        }
        else {
            res.sendFile(path.join(Resource.clientDirectory, basename));
        }
    };
    Resource.prototype.needsExperimentalFlag = function (baseName, parsedUrl) {
        return baseName === 'index.html' && !parsedUrl.query[experimentalModePropery] &&
            this.configSettings.getBoolean('enable.experimental.features', false);
    };
    Resource.prototype.needsPathName = function (baseName, parsedUrl) {
        return baseName === 'index.html' && parsedUrl.pathname === Resource.baseUrl;
    };
    Resource.prototype.needsBaseUrl = function (baseName, parsedUrl) {
        return baseName === 'index.html' && !parsedUrl.query[baseUrlProperty];
    };
    Resource.prototype.needsMetadatUri = function (baseName, parsedUrl) {
        return baseName === 'index.html' && !parsedUrl.query[metadataUriProperty];
    };
    Resource.baseUrl = '/glimpse/client';
    Resource.baseUrlDirectory = Resource.baseUrl + "/";
    Resource.clientDirectory = path.join(__dirname, '../../resources/embedded/client');
    return Resource;
}());
exports.Resource = Resource;

//# sourceMappingURL=../../../maps/src/resources/ClientEmbeddedResource.js.map
